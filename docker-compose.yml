version: "3.3"

services:

  api:
    build:
      context: .
    image: nord-dns
    env_file: docker-compose.env
    environment:
      SERVICES: api
      PORT: 3000
    depends_on:
      - nats
    labels:
      # Docker specific labels https://doc.traefik.io/traefik/routing/providers/docker/#specific-provider-options
      # Explicitly tell Traefik to expose this container
      - traefik.enable=true
      # Allow request only from the predefined entry point named "websecure"
      # - traefik.http.routers.api.entrypoints=websecure
      # - traefik.http.routers.api.rule=HostRegexp(`localhost`, `ndns.cf`, `{subdomain:[a-z]+}.local.ndns.cf`)
      # - traefik.http.routers.api.service=api
      # Use TLS between the API service and Traefik
      # - traefik.http.routers.api.tls=true
      # Tell Traefik to use the port 3000 to connect to `api` service
      # When Traefik Connecting to the Wrong Port: HTTP/502 Gateway Error
      # - traefik.http.services.api.loadbalancer.server.port=3000
      # - traefik.http.services.api.loadBalancer.server.scheme=https

      # TCP config (working, but the service is unavailable (HTTP/503 Service unavailable))
      - traefik.tcp.routers.api.entrypoints=websecure
      - traefik.tcp.routers.api.rule=HostSNI(`*`)
      - traefik.tcp.routers.api.service=apiService
      - traefik.tcp.services.apiService.loadbalancer.server.port=3000
      # - traefik.tcp.routers.api.tls.passthrough=true
    networks:
      - internal
  
  redis:
    image: redis:alpine
    entrypoint: redis-server
    networks:
      - internal

  doh:
    build:
      context: .
    image: nord-dns
    env_file: docker-compose.env
    environment:
      SERVICES: doh
    depends_on:
      - nats
      - redis
    labels:
      # Explicitly tell Traefik to expose this container
      - traefik.enable=true
      # Allow request only from the predefined entry point named "dot-socket"
      - traefik.http.routers.dot.entrypoints=dot-socket
      - traefik.tcp.routers.dot.tls.passthrough=true
      # Tell Traefik to use the port 853 to connect to `dot` service
      - traefik.http.services.dot.loadbalancer.server.port=853
    networks:
      - internal

  dot:
    build:
      context: .
    image: nord-dns
    env_file: docker-compose.env
    environment:
      SERVICES: dot
    depends_on:
      - nats
      - redis
    networks:
      - internal

  filter:
    build:
      context: .
    image: nord-dns
    env_file: docker-compose.env
    environment:
      SERVICES: filter
    depends_on:
      - nats
      - redis
    networks:
      - internal

  nats:
    image: nats:2
    networks:
      - internal

  traefik:
    image: traefik:v2.1
    command:
      - --log.level=DEBUG

      # Enabling docker provider
      - --providers.docker=true
      # Do not expose containers unless explicitly told so
      - --providers.docker.exposedbydefault=false

      - --providers.file.directory=/configuration/
      - --providers.file.watch=true


      ## API-GW Entrypoint
      # Traefik will listen to incoming request on entrypoint "websecure" to the port 3001 (HTTPS)
      - --entrypoints.websecure.address=:3001
      

      ## DoT TLS Socket Entrypoint
      # Traefik will listen to incoming request on entrypoint "dot-socket" to the port 853 (TLS)
      - --entryPoints.dot-socket.address=:853


      ## Jaeger Entrypoint
      # Traefik will listen to incoming request on entrypoint "jaeger" to the port 16686 (HTTPS)
      - --entrypoints.jaeger.address=:16686      
    ports:
      # HTTPS API Gateway (exposed:internal port)
      - 8443:3001
      # DoT (DNS-over-TLS on port 853)
      - 853:853
      # Jaeger Dashboard
      - 16686:16686
    volumes:
      # Bin the certificate folder to use custom certificates
      - ./certificates/:/certificates/:ro
      # Add certificate config for traefik
      - ./certificates/certificates.toml:/configuration/certificates.toml
      # So that Traefik can listen to the Docker events
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - internal
      - default
  
  jaeger:
    image: jaegertracing/all-in-one:1.21
    environment:
      COLLECTOR_ZIPKIN_HTTP_PORT: 9411
    labels:
      - traefik.enable=true
      # TCP config (working, but the service is unavailable (HTTP/503 Service unavailable))
      - traefik.tcp.routers.jaeger.entrypoints=jaeger
      # Use * to allow non TLS request (https://doc.traefik.io/traefik/v2.0/routing/routers/#rule_1)
      - traefik.tcp.routers.jaeger.rule=HostSNI(`*`)
      - traefik.tcp.routers.jaeger.service=jaeger
      # Don't use TLS
      - traefik.tcp.routers.jaeger.tls=false
      - traefik.tcp.services.jaeger.loadbalancer.server.port=16686
      # - traefik.tcp.routers.jaeger.tls.passthrough=true
    networks:
      - internal

networks:
  internal:

# volumes:
#   data:
