version: "3.3"

services:

  api-gw:
    build:
      context: .
    image: ghcr.io/iamfrench/nord-dns_api-gw
    env_file: docker-compose.env
    environment:
      SERVICES: api
      PORT: 3000
    depends_on:
      - nats # service registry
    labels:
      # Docker specific labels https://doc.traefik.io/traefik/routing/providers/docker/#specific-provider-options
      # Explicitly tell Traefik to expose this container
      - traefik.enable=true
      # Allow request only from the predefined entry point named "api-gw"
      - traefik.http.routers.api-gw_Router.entrypoints=api-gw
      # Create rule to match domaines ndns.cf & *.local.ndns.cf
      - traefik.http.routers.api-gw_Router.rule=HostRegexp(`ndns.cf`, `{subdomain:[a-z]+}.local.ndns.cf`)
      # Register service to use for this router
      - traefik.http.routers.api-gw_Router.service=api-gw_Service
      # Use TLS between the Traefik and the api-gw container
      # will terminate the TLS request
      - traefik.http.routers.api-gw_Router.tls=true
      
      # Tell Traefik to use the port 3000 to connect to `api` service
      # When Traefik Connecting to the Wrong Port: HTTP/502 Gateway Error
      # Even if we use a valid certificate, it doesn't includes an IP SANs
      # We have to disable traefik SSL verification (see traefic service command)
      - traefik.http.services.api-gw_Service.loadbalancer.server.port=3000
      - traefik.http.services.api-gw_Service.loadbalancer.server.scheme=https
      
      # Open Containers Annotations (used for GitHub packages and GitHub Container Registry)
      - org.opencontainers.image.source=https://github.com/IAmFrench/nord-dns
      - org.opencontainers.image.title="API Gateway"
      - org.opencontainers.image.description="Respond to incoming HTTPS traffic and packages query before forwarding to DoH service"
    networks:
      - internal
  
  redis:
    image: redis:alpine
    entrypoint: redis-server
    networks:
      - internal

  doh:
    build:
      context: .
    image: ghcr.io/iamfrench/nord-dns_doh
    env_file: docker-compose.env
    environment:
      SERVICES: doh.v1
    depends_on:
      - nats
      - redis
    labels:
      # Open Containers Annotations (used for GitHub packages and GitHub Container Registry)
      - org.opencontainers.image.source=https://github.com/IAmFrench/nord-dns
      - org.opencontainers.image.title="DNS-over-HTTPS Service"
      - org.opencontainers.image.description="Responds to DoH (DNS-over-HTTPS) request using built-in resolver"
    networks:
      - internal

  dot:
    build:
      context: .
    image: ghcr.io/iamfrench/nord-dns_dot
    env_file: docker-compose.env
    environment:
      SERVICES: dot.v1
    depends_on:
      - nats
      - redis
    labels:
      - traefik.enable=true
      # TCP config (working, but the service is unavailable (HTTP/503 Service unavailable))
      - traefik.tcp.routers.dot.entrypoints=dot-socket
      - traefik.tcp.routers.dot.rule=HostSNI(`*`)
      - traefik.tcp.routers.dot.service=dotService
      - traefik.tcp.services.dotService.loadbalancer.server.port=853
      - traefik.tcp.routers.dot.tls.passthrough=true

      # Open Containers Annotations (used for GitHub packages and GitHub Container Registry)
      - org.opencontainers.image.source=https://github.com/IAmFrench/nord-dns
      - org.opencontainers.image.title="DNS-over-TLS Service"
      - org.opencontainers.image.description="Responds to DoH (DNS-over-TLS) request using the DoH Service"
    networks:
      - internal

  filter:
    build:
      context: .
    image: ghcr.io/iamfrench/nord-dns_filter
    env_file: docker-compose.env
    environment:
      SERVICES: filter.v1
    depends_on:
      - nats
      - redis
    labels:
      - traefik.enable=false
      
      # Open Containers Annotations (used for GitHub packages and GitHub Container Registry)
      - org.opencontainers.image.source=https://github.com/IAmFrench/nord-dns
      - org.opencontainers.image.title="Filter Service"
      - org.opencontainers.image.description="Used to filter queries using blocklists such as 1Hosts and EasyList"
    networks:
      - internal

  nats:
    image: nats:latest
    networks:
      - internal

  traefik:
    image: traefik:latest
    restart: unless-stopped
    command:
      - --log.level=DEBUG

      ## Disable SSL verification
      # '500 Internal Server Error' caused by: x509: cannot validate certificate for 172.21.0.6 because it doesn't contain any IP SANs
      - --serversTransport.insecureSkipVerify=true


      ## Enabling Docker provider
      - --providers.docker=true
      # Do not expose containers unless explicitly told so
      - --providers.docker.exposedbydefault=false


      ## Enabling File provider
      - --providers.file.directory=/configuration/
      # Allow Traefik to automatically watch for file changes
      - --providers.file.watch=true


      # Enable Tracing to Jaeger
      - --tracing.jaeger=true
      - --tracing.jaeger.samplingServerURL=http://jaeger:5778/sampling
      - --tracing.jaeger.samplingType=const
      - --tracing.jaeger.samplingParam=1.0
      - --tracing.jaeger.localAgentHostPort=jaeger:6831
      - --tracing.jaeger.propagation=jaeger
      - --tracing.jaeger.traceContextHeaderName=uber-trace-id


      ## API-GW Entrypoint
      # Traefik will listen to incoming request on entrypoint "api-gw" to the port 3001 (HTTPS)
      - --entrypoints.api-gw.address=:3001
      

      ## DoT TLS Socket Entrypoint
      # Traefik will listen to incoming request on entrypoint "dot-socket" to the port 853 (TLS)
      - --entryPoints.dot-socket.address=:853
      

      ## Trafik built-in Dashboard
      - --api.dashboard=true
      - --entrypoints.https.address=:443
    ports:
      # "external:internal"
      # HTTPS API Gateway
      - 8443:3001
      # DoT (DNS-over-TLS on port 853)
      - 853:853
      # Traefik secure Dashboard (secure)
      - 443:443
    volumes:
      # Bin the certificate folder to use custom certificates
      - ./certificates/:/certificates/:ro
      # Add certificate config for traefik
      - ./certificates/certificates.toml:/configuration/certificates.toml
      - ./traefik.toml:/configuration/traefik.toml
      # So that Traefik can listen to the Docker events
      - /var/run/docker.sock:/var/run/docker.sock:ro
    labels:
      - traefik.enable=true
      ## Expose Traefik Dashboard
      - traefik.http.routers.dashboard.entrypoints=https,api-gw
      - traefik.http.routers.dashboard.rule=Host(`proxy.ndns.cf`)
      - traefik.http.routers.dashboard.tls=true
      - traefik.http.routers.dashboard.middlewares=traefik-forward-auth
      - traefik.http.routers.dashboard.service=api@internal

    depends_on:
      - jaeger
    networks:
      - internal
      - default
  
  traefik-forward-auth:
    image: thomseddon/traefik-forward-auth:2
    environment:
      - PROVIDERS_GOOGLE_CLIENT_ID=18224688288-ikosin5i8fe1ha2a9amvras4417nma04.apps.googleusercontent.com
      - PROVIDERS_GOOGLE_CLIENT_SECRET=uuB3wQKy-IZEfwQF7ZvDoqDs
      - SECRET=LnfbuvGezhdP4yRxrdIQ
      - COOKIE_DOMAIN=ndns.cf
      - URL_PATH=/_oauth
      - AUTH_HOST=oauth.ndns.cf:8443
      # - WHITELIST=
      - DEFAULT_ACTION=auth
      - DEFAULT_PROVIDER=google
      - LOG_LEVEL=debug
    labels:
      - traefik.enable=true
      - traefik.http.routers.traefik-forward-auth.entrypoints=https,api-gw
      - traefik.http.routers.traefik-forward-auth.rule=Host(`oauth.ndns.cf`) && PathPrefix(`/_oauth`)
      - traefik.http.routers.traefik-forward-auth.middlewares=traefik-forward-auth
      - traefik.http.routers.traefik-forward-auth.tls=true
      - traefik.http.middlewares.traefik-forward-auth.forwardauth.address=http://traefik-forward-auth:4181
      - traefik.http.middlewares.traefik-forward-auth.forwardauth.authResponseHeaders=X-Forwarded-User
      - traefik.http.services.traefik-forward-auth.loadbalancer.server.port=4181
    depends_on:
      - traefik
    networks:
      - internal

  jaeger:
    image: jaegertracing/all-in-one:latest
    environment:
      COLLECTOR_ZIPKIN_HTTP_PORT: 9411
    labels:
      - traefik.enable=true
      - traefik.http.routers.jaeger_Router.entrypoints=https,api-gw
      - traefik.http.routers.jaeger_Router.rule=Host(`tracer.ndns.cf`)
      - traefik.http.routers.jaeger_Router.middlewares=traefik-forward-auth
      - traefik.http.routers.jaeger_Router.tls=true
      - traefik.http.routers.jaeger_Router.service=jaeger_Service
      - traefik.http.services.jaeger_Service.loadbalancer.server.port=16686
    networks:
      - internal
  
  dohjs:
    build:
      context: ./dohjs
    image: ghcr.io/iamfrench/nord-dns_dohjs
    env_file: docker-compose.env
    environment:
      PORT: 3000
    labels:
      - traefik.enable=true
      - traefik.http.routers.dohjs_Router.entrypoints=https,api-gw
      - traefik.http.routers.dohjs_Router.rule=Host(`gui.ndns.cf`)
      - traefik.http.routers.dohjs_Router.service=dohjs_Service
      - traefik.http.routers.dohjs_Router.tls=true
      - traefik.http.services.dohjs_Service.loadbalancer.passhostheader=false
      - traefik.http.services.dohjs_Service.loadbalancer.server.port=3000
      - traefik.http.services.dohjs_Service.loadbalancer.server.scheme=http
      
      # Open Containers Annotations (used for GitHub packages and GitHub Container Registry)
      - org.opencontainers.image.source=https://github.com/IAmFrench/nord-dns
      - org.opencontainers.image.title="DoHjs Web Interface"
      - org.opencontainers.image.description="Provides a Web Interface to test DoH services"
    networks:
      - internal

networks:
  internal:

# volumes:
#   data:
